import { CommandDescription, Config, Driver, Logger, Migration, NameCreated } from './interfaces';
export declare class CommandsRunner {
    driver: Driver;
    directoryWithScripts: string;
    dateFormat: string;
    logger: Logger;
    commands: {
        [name: string]: CommandDescription;
    };
    constructor({ directoryWithScripts, dateFormat, driver, logger }: Config);
    runSql(sql: string, params: unknown[]): Promise<void>;
    readSql<T>(sql: string, params: unknown[]): Promise<T[]>;
    checkIfExists(): Promise<boolean>;
    doInit(): Promise<void>;
    getScriptStr(script: string): Promise<string>;
    getFilesMigrations(exclude: Migration[]): Promise<NameCreated[]>;
    runScript(fileName: string, created: Date, failSilently: boolean): Promise<void>;
    markExecuted(fileName: string, created: Date, migrationErr: string | null): Promise<void>;
    findNewMigrations(failSilently: boolean): Promise<NameCreated[]>;
    getDbMigrations(): Promise<Migration[]>;
    getCompletedMigrations(failSilently: boolean): Promise<Migration[]>;
    runMigrations(allScript: NameCreated[], failSilently: boolean): Promise<void>;
    markExecutedAll(allScript: NameCreated[]): Promise<void>;
    getFailedMigrations(): Promise<number>;
    resolveAllMigrations(): Promise<void>;
    run(command: 'init' | 'fake' | 'list' | 'migrate' | 'forceMigrate' | 'resolve' | 'getFailed' | 'help'): Promise<void>;
    printHelp(): void;
    findAndRunMigrations(failSilently: boolean): Promise<void>;
    fakeAllScripts(): Promise<void>;
    printMigrations(migrations: NameCreated[]): void;
    printNewMigrations(): Promise<void>;
}

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MysqlDriver = void 0;
const abstractdriver_1 = require("./abstractdriver");
class MysqlDriver extends abstractdriver_1.CommonDriver {
    isInitedSql() {
        return `SHOW TABLES LIKE '${this.migrationTable}'`;
    }
    createTableSql() {
        return `CREATE TABLE ${this.migrationTable}` +
            `(` +
            `    id INT PRIMARY KEY AUTO_INCREMENT,` +
            `    name VARCHAR(128) NOT NULL,` +
            `    run_on TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,` +
            `    created TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,` +
            `    error_if_happened LONGTEXT` +
            `)`;
    }
    readQuery(sql, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve) => {
                this.dbRunner.query(sql, params, (error, result, fields) => {
                    resolve({ error: this.extractError(error), rows: result });
                });
            });
        });
    }
}
exports.MysqlDriver = MysqlDriver;
//# sourceMappingURL=mysql.js.map
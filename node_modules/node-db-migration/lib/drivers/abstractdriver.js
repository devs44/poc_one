"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommonDriver = void 0;
class CommonDriver {
    constructor(dbRunner, migrationTable = 'migrations') {
        if (!dbRunner) {
            throw Error(`dbRunner can't be null`);
        }
        this.dbRunner = dbRunner;
        const tName = migrationTable.toLocaleLowerCase();
        if (tName !== migrationTable) {
            throw Error(`Migration table ${migrationTable} can't contain upper case`);
        }
        this.migrationTable = tName;
    }
    getSeparator() {
        return () => '?';
    }
    getDbMigrations() {
        return `select * from ${this.migrationTable}`;
    }
    removeAllMigrations() {
        return `update ${this.migrationTable} set error_if_happened = null where error_if_happened is not null`;
    }
    getFailedMigrations() {
        return `select * from ${this.migrationTable} where error_if_happened is not null`;
    }
    markExecuted() {
        const separator = this.getSeparator();
        return `insert into ${this.migrationTable} (name, created, error_if_happened) values (${separator()}, ${separator()}, ${separator()})`;
    }
    createUniqueTableIndex() {
        return `CREATE UNIQUE INDEX migrations_name_uindex ON ${this.migrationTable} (name)`;
    }
    query(sql, params) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.readQuery(sql, params);
            return res.error;
        });
    }
    executeMultipleStatements(sql) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.query(sql, []);
        });
    }
    extractError(e) {
        if (e) {
            if (e.message) {
                return e.message;
            }
            else {
                return 'Unknown error';
            }
        }
        else {
            return null;
        }
    }
}
exports.CommonDriver = CommonDriver;
//# sourceMappingURL=abstractdriver.js.map